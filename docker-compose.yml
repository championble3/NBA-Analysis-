# docker-compose.yml

services:
  postgres:
    image: postgres:13
    container_name: postgres-db
    environment:
      # Dane dla użytkownika, który będzie miał dostęp do obu baz
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      # Domyślna baza tworzona przez obraz, będzie to baza dla Airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # Ten skrypt stworzy drugą, dedykowaną bazę 'nbadatabase'
      - ./postgres_init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      # Sprawdzamy, czy baza 'airflow' jest gotowa, bo od niej zależy start Airflow
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 5s
      timeout: 5s
      retries: 5

  airflow-init:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    entrypoint: /bin/bash
    command: -c "airflow db init && airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com"
    environment:
      # Połączenie do metadanych Airflow - sztywno wpisana baza 'airflow'
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    depends_on:
      postgres:
        condition: service_healthy

  airflow-webserver:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-webserver
    restart: always
    env_file:
      - .env # Wczytuje zmienne NBA_* z pliku .env
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      # Połączenie do metadanych Airflow - sztywno wpisana baza 'airflow'
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__FERNET_KEY=Ag_7Fu0eFzy4i-IwPBloNKXN66FjNm2so_njB0fKksU=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./include:/opt/airflow/include
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-scheduler
    restart: always
    env_file:
      - .env # Wczytuje zmienne NBA_* z pliku .env
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      # Połączenie do metadanych Airflow - sztywno wpisana baza 'airflow'
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__FERNET_KEY=Ag_7Fu0eFzy4i-IwPBloNKXN66FjNm2so_njB0fKksU=
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./include:/opt/airflow/include
    command: scheduler

volumes:
  postgres-data: